# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ backend ]
  pull_request:
    branches: [ backend ]

jobs:
  build:
    env:
      working-directory: backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # JDK11로 gradle 빌드
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{env.working-directory}}
      - name: Build with Gradle
        run: ./gradlew bootJar
        working-directory: ${{env.working-directory}}

      # 도커 빌드(도커 이미지 생성)
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/codesquad-airbnb:1.0 .
          docker push ${{ secrets.DOCKER_USERNAME }}/codesquad-airbnb:1.0
          docker rmi ${{ secrets.DOCKER_USERNAME }}/codesquad-airbnb:1.0
        working-directory: ${{env.working-directory}}

      # 도커 이미지 배포 및 실행(EC2 ubuntu20.04로 배포)
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST_DNS }} #(생성한 인스턴스의 DNS주소)
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }} #(인스턴스를 생성할 때 다운받은 pem키안에 값을 모두 복사해서 붙여넣기)
          envs: GITHUB_SHA
          script: |
            sudo docker ps -a -q --filter "name=codesquad-airbnb" | grep -q . && docker stop codesquad-airbnb && docker rm codesquad-airbnb | true
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/codesquad-airbnb:1.0
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/codesquad-airbnb:1.0
            sudo docker run -d -p 80:8080 --name codesquad-airbnb ${{ secrets.DOCKER_USERNAME }}/codesquad-airbnb:1.0 -e MYSQL_HOST=${{ secrets.MYSQL_HOST }} -e MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }} -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}  -e PROFILE=${{ secrets.PROFILE }} -e CLIENT_ID=${{ secrets.CLIENT_ID }} -e CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}       
            sudo docker rmi -f $(docker images -f "dangling=true" -q) || true
